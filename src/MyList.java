
/**
 * Моя реализация интерфейса List.
 *
 * @param <T> тип элементов в списке.
 *
 * Так как список можно будет сортировать, элемент должен имплементировать интерфейс Comparable.
 */
public interface MyList<T extends Comparable<T>> {

    /**
     * Добавляет указанный элемент в конец списка.
     *
     * @param data элемент, который будет добавлен в список.
     */
    void add(T data);

    /**
     * Добавляет указанный элемент в указанную позицию в списке.
     *
     * @param index индекс, по которому должен быть вставлен указанный элемент.
     * @param data элемент, который должен быть вставлен.
     * @throws IndexOutOfBoundsException если индекс выходит за пределы диапазона (index < 0 || index > size()).
     */
    void add(int index, T data);

    /**
     * Возвращает элемент находящийся в указанной позиции в списке.
     *
     * @param index индекс возвращаемого элемента.
     * @return элемент в указанной позиции в списке.
     * @throws IndexOutOfBoundsException если индекс выходит за пределы диапазона (index < 0 || index >= size()).
     */
    T get(int index);

    /**
     * Удаляет элемент находящийся в указанной позиции в списке.
     *
     * @param index индекс элемента, который нужно удалить.
     * @return элемент, который был удален из списка.
     * @throws IndexOutOfBoundsException если индекс выходит за пределы диапазона (индекс < 0 || индекс >= размер()).
     */
    T delete(int index);

    /**
     * Удаляет все элементы из списка.
     * @return true, когда все элементы удалены.
     */
    boolean clear();

    /**
     * Сортировка списка в естественном порядке(возрастание), реализовано через быструю сортировку.
     */
    void sort();

    /**
     * Печать списка в консоль.
     */
    void printList();

}